@model PagedList.IPagedList<M17E_Caderneta.Models.User>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "Index";
}

<h2 class="mt-5">Utilizadores</h2>

<div class="shadow border p-3 mt-4">

    <div class="mb-3 d-flex justify-content-between">
        <div class="dropdown">
            <a class="btn btn-outline-dark dropdown-toggle" href="#" role="button" id="dropdownFiltros" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Ordenação
            </a>

            <ul class="dropdown-menu" aria-labelledby="dropdownFiltros">
                <li> <a class="dropdown-item" href="@Url.Action("Index",new { sortOrder = "name_asc",currentFilter=ViewBag.CurrentFilter})">Nome [a-z]</a></li>
                <li><a class="dropdown-item" href="@Url.Action("Index",new { sortOrder = "name_desc",currentFilter=ViewBag.CurrentFilter})">Nome [z-a]</a></li>
                <li><a class="dropdown-item" href="@Url.Action("Index",new { sortOrder = "num_asc",currentFilter=ViewBag.CurrentFilter})">Número Interno ↑</a></li>
                <li><a class="dropdown-item" href="@Url.Action("Index",new { sortOrder = "num_desc",currentFilter=ViewBag.CurrentFilter})">Número Interno ↓</a></li>

            </ul>
        </div>

        <div>
            @Html.ActionLink("Criar novo utilizador", "Create", new { }, new { @class = "btn btn-success" })
        </div>
        @using (Html.BeginForm("Index", "Users", FormMethod.Get))
        {
            <div class="d-flex ">

                @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "form-control ", @placeholder = "Procurar por nome ou número interno", @type = "search", @style ="width: 350px" })
                <input type="submit" value="Procurar" class="ml-3 btn btn-sm btn-outline-dark" />
            </div>
        }
    </div>
    <table class="table">
        <thead class="thead-dark">

            <tr>
                <th>
                    Foto
                </th>
                <th>
                    Email
                </th>
                <th>
                    Nome
                </th>
                <th>
                    Perfil
                </th>
                <th>
                    Data de nascimento
                </th>
                <th>
                    Número Interno
                </th>
                <th>
                    Estado da conta
                </th>
                <th>
                    @Html.Raw("Turma")
                </th>
                <th>
                    Número Turma
                </th>
                <th>Opções</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.Raw("<img id=\"img_foto\" src=\"data:image/jpeg;base64," + Convert.ToBase64String(item.foto) + "\" class=\"img-thumbnail rounded\" style=\"width: 150px\" />")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Nome)
                    </td>
                    <td>
                        @switch (item.Perfil)
                        {
                            case 0:
                                @Html.Raw("Administrador")
                                break;

                            case 1:
                                @Html.Raw("Professor")
                                break;
                            case 2:
                                @Html.Raw("Aluno")
                                break;
                            default:
                                @Html.Raw("Indefinido")
                                break;
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DataNascimento)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NumInterno)
                    </td>
                    <td>
                        @Html.Raw(item.estado ? "Ativada" : "Desativada")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Turma.Nome)
                    </td>
                    <td>
                        @if (item.NumTurma != 0)
                        {
                            @Html.DisplayFor(modelItem => item.NumTurma);
                        }

                    </td>
                    <td>
                        <a href="@Url.Action("Edit",new { id = item.Id })" class="mr-3" data-toggle="tooltip" data-placement="top" title="Editar"><i class="far fa-edit"></i></a>
                        <a href="@Url.Action("Details",new { id = item.Id })" class="mr-3" data-toggle="tooltip" data-placement="top" title="Detalhes"><i class="far fa-info-square text-warning"></i></a>
                        @if (User.Identity.Name != item.Id.ToString())
                        {
                            <a href="@Url.Action("Delete",new { id = item.Id })" data-toggle="tooltip" data-placement="top" title="Eliminar"><i class="far fa-trash-alt text-danger"></i></a>
                        }
                    </td>

                </tr>
            }
        </tbody>

    </table>
    <br />
    Página @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) de @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Index",
        new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
</div>